Parser Constructer takes in a path to output file and a hash containing callback information.
Possible callback functions are "BugCallback", "MetricCallback", "InitialCallback", and "SummaryCallback".
The InitialCallback will be called with the initializer hash containing tool information.
The BugCallback will be called for each BugInstance and will receive a parameter of a BugInstanceHash containing
    one bugs information.
The MetricCallback will be called for each Metric and will receive a MetricHash containg one metrics information.
The SummaryCallback will be called with the SummaryHash as a parameter containing summary information.


The following contains the structure of the different hashes returned and used by SCARF writing and reading tools:

InitialyzerHash:

$hash = {
    'tool_version' => '1.0.0',	### REQUIRED: Version number of tool being run
    'tool_name' => 'bungee',	### REQUIRED: Name of tool being run
    'uuid' => '2'		### REQUIRED: Unique Id extracted from build_summary.xml output
    }


BugInstanceHash:

$hash = {
    'AssessmentReportFile' => filename.xml', ### REQUIRED: Contains location of Assessment report file containing bug
    'BuildId' => '1',			     ### REQUIRED: Contains build artifact id from build_summary.xml file 
    'BugCode' => 'code',		     ### OPTIONAL: Contains abbreviation describing the specific bug
    'BugId' => '1',			     ### PROVIDED: Reader provided details of which bug # hash references
    'BugRank' => '10',			     ### OPTIONAL: Tool specific ranking information
    'CweIds' => [			     ### OPTIONAL: Tool specific CWE Ids for the bug
	'10','8','3'			     ###
	]				     ###
    'Methods' => [			     ### OPTIONAL: Methods where bug is reported
	{				     ###
	    'MethodId' => '1',               ###	PROVIDED: Reader provided details of which method is referenced
	    'name' => 'method1',	     ###	REQUIRED: Name of method
	    'primary' => 0		     ###	REQUIRED: One method needs to be primary
	},				     ###
	{				     ###
	    'MethodId' => '2',               ###
	    'name' => 'method2',	     ###
	    'primary' => 1		     ###
	}				     ###
    ],					     ###
    'ClassName' => 'class',		     ### OPTIONAL: Class where bug is reported
    'BugSeverity' => 'high',		     ### OPTIONAL: Severity of reported bug.
    'BugGroup' => 'group',		     ### OPTIONAL: Tool specific grouping information
    'BugLocations' => [			     ### REQUIRED: At least 1 location of the bug
	{				     ###
	    'EndLine' => '2',		     ### OPTIONAL: End Line number in source file
	    'LocationId' => '1',	     ### PROVIDED: Reader provided details on which location is referenced
	    'StartLine' => '1',		     ### OPTIONAL: Start Line number in source file
	    'primary' => 1,		     ### REQUIRED: One location must be primary
	    'SourceFile' => 'source'	     ### REQUIRED: Source file containing the bug 
	},				     ###
	{				     ###
	    'primary' => 0,		     ###
	    'EndColumn' => '3',		     ### OPTIONAL: End Column in source file
	    'EndLine' => '311',		     ###
	    'Explanation' => 'recurring',    ### OPTIONAL: Explanation of bug
	    'StartLine' => '309',	     ###
	    'LocationId' => '2',	     ###
	    'SourceFile' => 'source',	     ###
	    'StartColumn' => '2'	     ### OPTIONAL: Start Column in source file
	}				     ###
    ],					     ###
    'InstanceLocation' => {		     ### OPTIONAL: Location of bug instance in original file
	'Xpath' => 'path'  OR 'LineNum' => { ### 	REQUIRED: One way of locating bug instance
				    'Start' = '1', ###		REQUIRED: Start line number for bug instance
				    'End' = '2'    ###		REQUIRED: End line number for bug instance
				}	     ###
    }					     ###
    'BugMessage' => 'this is a test',        ### REQUIRED: Message from tool explaining reported bug
    'ResolutionSuggestion' => 'try help'     ### OPTIONAL: Suggestion for resolving the bug
}



MetricHash:

$hash = {
    'Value' => '2',		### REQUIRED: Indicates the results of the metric
    'Type' => 'typename',	### REQUIRED: Indicates the type of the metric being used
    'Method' => 'methodname',	### OPTIONAL: Name of method being analyzed
    'Class' => 'classname',	### OPTIONAL: Name of class being analyzed
    'SourceFile' => 'test.txt', ### REQUIRED: Contains the location of the source file
    'MetricId' => '1'		### PROVIDED: Reader provided details on which metric is being referenced
}



Summaries are generated by the SCARF writers from the data from bugs and metrics.
This means that summary fields are provided

BugSummary:

$hash = {
    'code' => {
	'group' => {
	    'bytes' => '1164',
	    'count' => '1'
	    }
	'undefined' => {
	    'bytes' => '1605',
	    'count' => '2'
	    }
	}
    'code2' => {
	'group2' => {
	    'bytes' => '902',
	    'count' => '1'
	    }
	}
    }


Metric Summary:

$hash = {
    'MetricSummaries' => [{
	'Type' => 'type-name',
	'Maximum' => '2',
	'Sum' => '2',
	'Average' => '2.00',
	'StandardDeviation' => '0.00',
	'Count' => '1',
	'Minimum' => '2',
	'SumOfSquares' => '4'
	},
	{
	'Type' => 'type',
	'Maximum' => '+5',
	'Sum' => '0',
	'Average' => '0.00',
	'StandardDeviation' => '7.07',
	'Count' => '2',
	'Minimum' => '-5',
	'SumOfSquares' => '50'
	}
    }





















